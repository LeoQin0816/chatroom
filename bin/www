#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('chatroom:server');
// 删除http服务，使用expresshttp服务替代
// var http = require('http');
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = app.listen(port);
const io = require('socket.io').listen(server);

// 注释http服务
// const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// 在线人数统计  
let onlineCount = 0; 


// 当有用户连接进来时  
io.on('connection', function (socket) {
  console.log('a user connected');

  // 发送给客户端在线人数  
  io.emit('connected', ++onlineCount);

  // 当有用户断开  
  socket.on('disconnect', function () {
    console.log('user disconnected');

    // 发送给客户端断在线人数  
    io.emit('disconnected', --onlineCount);
    console.log(onlineCount);
  });

  // 收到了客户端发来的消息  
  socket.on('message', function (message) {
    // 给客户端发送消息  
    io.emit('message', message);
  });
}); 